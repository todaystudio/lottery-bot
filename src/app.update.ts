import {Action, Ctx, Hears, Help, InjectBot, Message, On, Start, Update} from "nestjs-telegraf";
import {Telegraf} from "telegraf";
import {GoogleSheetsService, IStudent, IStudentDB} from "./google-sheets/google-sheets.service";
import {
    acceptStudentButtons,
    authorizationButtons,
    selectGroupButtons,
    selectStudentButtons,
    updateInformationButton
} from "./app.buttons";
import {Context} from "./context.interface";
import {checkLastUpdate, getHiddenPhone, replyInformationOfStudent} from "./app.reply";
import {BadRequestException, NotFoundException} from "@nestjs/common";

@Update()
export class AppUpdate {
    regex = /^üë®üèª‚Äçüíª\s[A-Za-z–ê-–Ø–∞-—è]+\s[A-Za-z–ê-–Ø–∞-—è]+\s\|\s\d{3}$/;
    codeRegex = /\d{4}/;

    constructor(
        @InjectBot() private readonly bot: Telegraf<Context>,
        private readonly google: GoogleSheetsService
    ) {
    }

    @Start()
    async startCommand(ctx: Context) {
        const studentId = ctx.session.studentId;


        try {
            if (studentId && ctx.session.type !== "notAuth") {
                const student = await this.google.getStudentByIdFromDB(studentId);
                await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || ctx.from.username} üî•`);
                await ctx.reply(`–¢—ã –ø–æ –ø–æ–≤–æ–¥—É –Ω–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: ${student?.name || "null"}?`, acceptStudentButtons());
            } else {
                throw new BadRequestException("–í–µ—Ä–æ—è—Ç–Ω–æ, —Ç—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ü§∑üèª‚Äç‚ôÇÔ∏è");
            }
        } catch (e) {
            await this.goAuth(ctx, e)
        }
    }

    async sendNotification(id) {
        await this.bot.telegram.sendMessage(449631108, id)
    }

    async goAuth(ctx: Context, e?: Error) {
        ctx.session.type = "notAuth";
        await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || ctx.from.username} üî•`);
        if (!e) {
            await ctx.reply("–ù—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", authorizationButtons());
            return
        }
        await ctx.reply(e.message || 'ü•≥', authorizationButtons());
    }

    @Help()
    async getHelp(@Ctx() ctx: Context) {
        await ctx.reply('–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, —Ç–æ —Ç—ã —Å–º–µ–ª–æ –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ @todaystudio_web')
        try {
            await this.google.setMetrics(ctx.session.studentId, ctx.from.id, "help")
        } catch (e) {
            console.log(e)
        }
    }

    @Hears('/logout')
    async logout(@Ctx() ctx: Context) {
        try {
            if (ctx.session.studentId) {
                try {
                    await this.google.setMetrics(ctx.session.studentId, ctx.from.id, "logout")
                } catch (e) {
                    console.log(e)
                }
            }
            ctx.session = {
                type: "notAuth"
            }
            await ctx.reply('–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã ‚úÖ', authorizationButtons())
        } catch (e) {
            await ctx.reply(e.message)
        }
    }

    @Action("auth")
    async selectGroup(@Ctx() ctx: Context) {
        ctx.deleteMessage();
        await ctx.reply("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É üõÇ", selectGroupButtons());
    }


    @Hears(/–ì—Ä—É–ø–ø–∞ 7 –í–° 15:30|–ì—Ä—É–ø–ø–∞ 2 –°–ë 13:00|–ì—Ä—É–ø–ø–∞ 3 –°–ë 15:30|–ì—Ä—É–ø–ø–∞ 4 –°–ë 18:00|–ì—Ä—É–ø–ø–∞ 5 –í–° 10:30|–ì—Ä—É–ø–ø–∞ 6 –í–° 13:00/)
    async selectStudent(@Message("text") msg: string, @Ctx() ctx: Context) {
        ctx.session.group = msg;
        try {
            const students = await this.google.getStudentsByGroup(msg);
            await ctx.reply("–í—ã–±–µ—Ä–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ üë®üèª‚Äçüíª", selectStudentButtons(students));
        } catch (e) {
            await ctx.reply(e.message);
        }
    }


    @Action("acceptStudent")
    async acceptStudent(@Ctx() ctx: Context) {
        if (!ctx.session.studentId) {
            await this.goAuth(ctx)
            return
        }
        try {
            const student: IStudent = await this.google.getRowCountByParticipantId(ctx.session.studentId);
            await replyInformationOfStudent(student, ctx);
            try {
                await this.google.setMetrics(ctx.session.studentId, ctx.from.id, "check")
            } catch (e) {
                console.log(e)
            }
        } catch (e) {
            ctx.replyWithHTML(`<b>${e.message}</b> \n
üî•<i>–î–µ–ª–∞–π –¥–æ–º–∞—à–∫—É, –ø—Ä–∏–Ω–æ—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!</i>üî•
         `, updateInformationButton());
        }
    }

    @Action("fromName")
    async findFromName(@Ctx() ctx: Context) {
        await ctx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é üî•");
        ctx.session.type = "fromName";
    }

    @Action("fromID")
    async findFromID(@Ctx() ctx: Context) {
        await ctx.reply("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π ID üî•");
        ctx.session.type = "fromID";
    }

    @Hears("üí´ –û–±–Ω–æ–≤–∏—Ç—å")
    async updateInformation(@Ctx() ctx: Context) {
        if (!ctx.session.studentId) return await this.goAuth(ctx)
        const {minutesLeft, isExpired} = checkLastUpdate(ctx.session.lastUpdate)
        if (ctx.session.lastUpdate && !isExpired) {
            await ctx.replyWithHTML(`
<b>–ï—â–µ –Ω–µ –≤—Ä–µ–º—è...</b>

–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ü•≤

<i>–ü–æ–¥–æ–∂–¥–∏ –µ—â–µ ${minutesLeft} –º–∏–Ω—É—Ç(-—ã)</i>
      `)
            return
        }


        try {
            if (ctx.session.infoMsgId !== null) ctx.deleteMessage(ctx.session.infoMsgId).then(ctx.session.infoMsgId = null);
        } finally {
            const loadingMessage = ctx.reply("–û–±–Ω–æ–≤–ª—è–µ–º... üíæ");
            await this.acceptStudent(ctx);
            await loadingMessage.then(msg => ctx.deleteMessage(msg.message_id));
            ctx.session.lastUpdate = new Date().getTime()
            try {
                await this.google.setMetrics(ctx.session.studentId, ctx.from.id, "update")
            } catch (e) {
                console.log(e)
            }
        }

    }

    @On("text")
    async getMessage(@Message("text") message: string, @Ctx() ctx: Context) {
        if (!ctx.session.type) return;


        if (ctx.session.group && this.regex.test(message.toString())) {
            const studentId = message.split("|")[1].trim();
            ctx.session.studentId = studentId;
            try {
                const student: IStudentDB = await this.google.getStudentByIdFromDB(studentId);
                const {code, phone, hiddenPhone} = await getHiddenPhone(student.phone);

                await ctx.replyWithHTML(`
          –ï—Å–ª–∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–±–µ –∑–Ω–∞–∫–æ–º, —Ç–æ –≤–≤–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã ‚òéÔ∏è
          <b>${hiddenPhone}</b>
        `, {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });


                ctx.session.phone = phone;
                ctx.session.code = code;
            } catch (e) {
                await ctx.reply(e.message);
            }
        }

        if (ctx.session.code && ctx.session.type === "notAuth" && this.codeRegex.test(message)) {
            const isAuth = ctx.session.code === message;
            if (isAuth) {
                ctx.deleteMessage().then(() => ctx.session.type = "auth");
                await ctx.reply("–§—É—Ö... üòÖ –¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", acceptStudentButtons());
                await this.google.setMetrics(ctx.session.studentId, ctx.from.id, "auth")
            } else {
                await ctx.reply("–ö–æ–¥ –Ω–µ –ø–æ–¥–æ—à–µ–ªü•≤ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑");
            }

        }


        if (ctx.session.type === "fromID") {
            try {
                const student: IStudent = await this.google.getRowCountByParticipantId(message);
                await replyInformationOfStudent(student, ctx);
            } catch (e) {
                await ctx.reply(e.message);
            }
        }

        if (ctx.session.type === "fromName") {
            try {
                if (message.length < 3) throw new NotFoundException("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ ü§®");
                const student: IStudent = await this.google.getRowCountByParticipantName(message);
                await replyInformationOfStudent(student, ctx);
            } catch (e) {
                await ctx.reply(e.message);
            }
        }
    }
}
